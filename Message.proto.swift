// Generated by the Protocol Buffers 3.2 compiler.  DO NOT EDIT!
// Source file "Message.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct MessageRoot {
  public static let `default` = MessageRoot()
  public var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(registry: extensionRegistry)
  }
  public func registerAllExtensions(registry: ExtensionRegistry) {
  }
}

final public class SubMessage : GeneratedMessage {

  public static func == (lhs: SubMessage, rhs: SubMessage) -> Bool {
    if (lhs === rhs) {
      return true
    }
    var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
    fieldCheck = fieldCheck && (lhs.hasStr == rhs.hasStr) && (!lhs.hasStr || lhs.str == rhs.str)
    fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
    return fieldCheck
  }

  public fileprivate(set) var str:String = ""
  public fileprivate(set) var hasStr:Bool = false

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeTo(codedOutputStream: CodedOutputStream) throws {
    if hasStr {
      try codedOutputStream.writeString(fieldNumber: 1, value:str)
    }
    try unknownFields.writeTo(codedOutputStream: codedOutputStream)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasStr {
      serialize_size += str.computeStringSize(fieldNumber: 1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func getBuilder() -> SubMessage.Builder {
    return SubMessage.classBuilder() as! SubMessage.Builder
  }
  public func getBuilder() -> SubMessage.Builder {
    return classBuilder() as! SubMessage.Builder
  }
  override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
    return SubMessage.Builder()
  }
  override public func classBuilder() -> ProtocolBuffersMessageBuilder {
    return SubMessage.Builder()
  }
  public func toBuilder() throws -> SubMessage.Builder {
    return try SubMessage.builderWithPrototype(prototype:self)
  }
  public class func builderWithPrototype(prototype:SubMessage) throws -> SubMessage.Builder {
    return try SubMessage.Builder().mergeFrom(other:prototype)
  }
  override public func encode() throws -> Dictionary<String,Any> {
    guard isInitialized() else {
      throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
    }

    var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
    if hasStr {
      jsonMap["str"] = str
    }
    return jsonMap
  }
  override class public func decode(jsonMap:Dictionary<String,Any>) throws -> SubMessage {
    return try SubMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
  }
  override class public func fromJSON(data:Data) throws -> SubMessage {
    return try SubMessage.Builder.fromJSONToBuilder(data:data).build()
  }
  override public func getDescription(indent:String) throws -> String {
    var output = ""
    if hasStr {
      output += "\(indent) str: \(str) \n"
    }
    output += unknownFields.getDescription(indent: indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasStr {
             hashCode = (hashCode &* 31) &+ str.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "SubMessage"
  }
  override public func className() -> String {
      return "SubMessage"
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    fileprivate var builderResult:SubMessage = SubMessage()
    public func getMessage() -> SubMessage {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var str:String {
         get {
              return builderResult.str
         }
         set (value) {
             builderResult.hasStr = true
             builderResult.str = value
         }
    }
    public var hasStr:Bool {
         get {
              return builderResult.hasStr
         }
    }
    @discardableResult
    public func setStr(_ value:String) -> SubMessage.Builder {
      self.str = value
      return self
    }
    @discardableResult
    public func clearStr() -> SubMessage.Builder{
         builderResult.hasStr = false
         builderResult.str = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    @discardableResult
    override public func clear() -> SubMessage.Builder {
      builderResult = SubMessage()
      return self
    }
    override public func clone() throws -> SubMessage.Builder {
      return try SubMessage.builderWithPrototype(prototype:builderResult)
    }
    override public func build() throws -> SubMessage {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> SubMessage {
      let returnMe:SubMessage = builderResult
      return returnMe
    }
    @discardableResult
    public func mergeFrom(other:SubMessage) throws -> SubMessage.Builder {
      if other == SubMessage() {
       return self
      }
      if other.hasStr {
           str = other.str
      }
      try merge(unknownField: other.unknownFields)
      return self
    }
    @discardableResult
    override public func mergeFrom(codedInputStream: CodedInputStream) throws -> SubMessage.Builder {
         return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
    }
    @discardableResult
    override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> SubMessage.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
      while (true) {
        let protobufTag = try codedInputStream.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10:
          str = try codedInputStream.readString()

        default:
          if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
    class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> SubMessage.Builder {
      let resultDecodedBuilder = SubMessage.Builder()
      if let jsonValueStr = jsonMap["str"] as? String {
        resultDecodedBuilder.str = jsonValueStr
      }
      return resultDecodedBuilder
    }
    override class public func fromJSONToBuilder(data:Data) throws -> SubMessage.Builder {
      let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
      guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
      }
      return try SubMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
    }
  }

}

final public class SampleMessage : GeneratedMessage {

  public static func == (lhs: SampleMessage, rhs: SampleMessage) -> Bool {
    if (lhs === rhs) {
      return true
    }
    var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
    fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
    fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
    fieldCheck = fieldCheck && (lhs.hasMes == rhs.hasMes) && (!lhs.hasMes || lhs.mes == rhs.mes)
    fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
    return fieldCheck
  }



  //OneOf declaration start

  public enum TestOneof {
    case OneOfTestOneofNotSet

    public func checkOneOfIsSet() -> Bool {
         switch self {
         case .OneOfTestOneofNotSet:
              return false
         default:
              return true
         }
    }
    case Name(String)

    public static func getName(_ value:TestOneof) -> String? {
         switch value {
         case .Name(let enumValue):
              return enumValue
         default:
              return nil
         }
    }
    case Id(Int32)

    public static func getId(_ value:TestOneof) -> Int32? {
         switch value {
         case .Id(let enumValue):
              return enumValue
         default:
              return nil
         }
    }
    case Mes(SubMessage)

    public static func getMes(_ value:TestOneof) -> SubMessage? {
         switch value {
         case .Mes(let enumValue):
              return enumValue
         default:
              return nil
         }
    }
  }
  //OneOf declaration end

  fileprivate var storageTestOneof:SampleMessage.TestOneof =  SampleMessage.TestOneof.OneOfTestOneofNotSet
  public func getOneOfTestOneof() ->  SampleMessage.TestOneof {
      let copyObjectTestOneof = storageTestOneof
      return copyObjectTestOneof
  }
  public fileprivate(set) var name:String!{
       get {
            return SampleMessage.TestOneof.getName(storageTestOneof)
       }
       set (newvalue) {
            storageTestOneof = SampleMessage.TestOneof.Name(newvalue)
       }
  }
  public fileprivate(set) var hasName:Bool {
        get {
              guard let _ = SampleMessage.TestOneof.getName(storageTestOneof) else {
                  return false
              }
              return true
        }
        set(newValue) {
        }
  }
  public fileprivate(set) var id:Int32!{
       get {
            return SampleMessage.TestOneof.getId(storageTestOneof)
       }
       set (newvalue) {
            storageTestOneof = SampleMessage.TestOneof.Id(newvalue)
       }
  }
  public fileprivate(set) var hasId:Bool {
        get {
              guard let _ = SampleMessage.TestOneof.getId(storageTestOneof) else {
                  return false
              }
              return true
        }
        set(newValue) {
        }
  }
  public fileprivate(set) var mes:SubMessage!{
       get {
            return SampleMessage.TestOneof.getMes(storageTestOneof)
       }
       set (newvalue) {
            storageTestOneof = SampleMessage.TestOneof.Mes(newvalue)
       }
  }
  public fileprivate(set) var hasMes:Bool {
        get {
              guard let _ = SampleMessage.TestOneof.getMes(storageTestOneof) else {
                  return false
              }
              return true
        }
        set(newValue) {
        }
  }
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeTo(codedOutputStream: CodedOutputStream) throws {
    if hasName {
      try codedOutputStream.writeString(fieldNumber: 4, value:name)
    }
    if hasId {
      try codedOutputStream.writeInt32(fieldNumber: 5, value:id)
    }
    if hasMes {
      try codedOutputStream.writeMessage(fieldNumber: 6, value:mes)
    }
    try unknownFields.writeTo(codedOutputStream: codedOutputStream)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasName {
      serialize_size += name.computeStringSize(fieldNumber: 4)
    }
    if hasId {
      serialize_size += id.computeInt32Size(fieldNumber: 5)
    }
    if hasMes {
        if let varSizemes = mes?.computeMessageSize(fieldNumber: 6) {
            serialize_size += varSizemes
        }
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func getBuilder() -> SampleMessage.Builder {
    return SampleMessage.classBuilder() as! SampleMessage.Builder
  }
  public func getBuilder() -> SampleMessage.Builder {
    return classBuilder() as! SampleMessage.Builder
  }
  override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
    return SampleMessage.Builder()
  }
  override public func classBuilder() -> ProtocolBuffersMessageBuilder {
    return SampleMessage.Builder()
  }
  public func toBuilder() throws -> SampleMessage.Builder {
    return try SampleMessage.builderWithPrototype(prototype:self)
  }
  public class func builderWithPrototype(prototype:SampleMessage) throws -> SampleMessage.Builder {
    return try SampleMessage.Builder().mergeFrom(other:prototype)
  }
  override public func encode() throws -> Dictionary<String,Any> {
    guard isInitialized() else {
      throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
    }

    var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
    if hasName {
      jsonMap["name"] = name
    }
    if hasId {
      jsonMap["id"] = Int(id)
    }
    if hasMes {
      jsonMap["mes"] = try mes.encode()
    }
    return jsonMap
  }
  override class public func decode(jsonMap:Dictionary<String,Any>) throws -> SampleMessage {
    return try SampleMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
  }
  override class public func fromJSON(data:Data) throws -> SampleMessage {
    return try SampleMessage.Builder.fromJSONToBuilder(data:data).build()
  }
  override public func getDescription(indent:String) throws -> String {
    var output = ""
    if hasName {
      output += "\(indent) name: \(name) \n"
    }
    if hasId {
      output += "\(indent) id: \(id) \n"
    }
    if hasMes {
      output += "\(indent) mes {\n"
      if let outDescMes = mes {
        output += try outDescMes.getDescription(indent: "\(indent)  ")
      }
      output += "\(indent) }\n"
    }
    output += unknownFields.getDescription(indent: indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasName {
             hashCode = (hashCode &* 31) &+ name.hashValue
          }
          if hasId {
             hashCode = (hashCode &* 31) &+ id.hashValue
          }
          if hasMes {
              if let hashValuemes = mes?.hashValue {
                  hashCode = (hashCode &* 31) &+ hashValuemes
              }
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "SampleMessage"
  }
  override public func className() -> String {
      return "SampleMessage"
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    fileprivate var builderResult:SampleMessage = SampleMessage()
    public func getMessage() -> SampleMessage {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    public var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    @discardableResult
    public func setName(_ value:String) -> SampleMessage.Builder {
      self.name = value
      return self
    }
    @discardableResult
    public func clearName() -> SampleMessage.Builder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
    public var id:Int32 {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    @discardableResult
    public func setId(_ value:Int32) -> SampleMessage.Builder {
      self.id = value
      return self
    }
    @discardableResult
    public func clearId() -> SampleMessage.Builder{
         builderResult.hasId = false
         builderResult.id = Int32(0)
         return self
    }
    public var mes:SubMessage! {
         get {
             if mesBuilder_ != nil {
                builderResult.mes = mesBuilder_.getMessage()
             }
             return builderResult.mes
         }
         set (value) {
             builderResult.hasMes = true
             builderResult.mes = value
         }
    }
    public var hasMes:Bool {
         get {
             return builderResult.hasMes
         }
    }
    fileprivate var mesBuilder_:SubMessage.Builder! {
         didSet {
            builderResult.hasMes = true
         }
    }
    public func getMesBuilder() -> SubMessage.Builder {
      if mesBuilder_ == nil {
         mesBuilder_ = SubMessage.Builder()
         builderResult.mes = mesBuilder_.getMessage()
         if mes != nil {
            try! mesBuilder_.mergeFrom(other: mes)
         }
      }
      return mesBuilder_
    }
    @discardableResult
    public func setMes(_ value:SubMessage!) -> SampleMessage.Builder {
      self.mes = value
      return self
    }
    @discardableResult
    public func mergeMes(value:SubMessage) throws -> SampleMessage.Builder {
      if builderResult.hasMes {
        builderResult.mes = try SubMessage.builderWithPrototype(prototype:builderResult.mes).mergeFrom(other: value).buildPartial()
      } else {
        builderResult.mes = value
      }
      builderResult.hasMes = true
      return self
    }
    @discardableResult
    public func clearMes() -> SampleMessage.Builder {
      mesBuilder_ = nil
      builderResult.hasMes = false
      builderResult.mes = nil
      return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    @discardableResult
    override public func clear() -> SampleMessage.Builder {
      builderResult = SampleMessage()
      return self
    }
    override public func clone() throws -> SampleMessage.Builder {
      return try SampleMessage.builderWithPrototype(prototype:builderResult)
    }
    override public func build() throws -> SampleMessage {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> SampleMessage {
      let returnMe:SampleMessage = builderResult
      return returnMe
    }
    @discardableResult
    public func mergeFrom(other:SampleMessage) throws -> SampleMessage.Builder {
      if other == SampleMessage() {
       return self
      }
      if other.hasName {
           name = other.name
      }
      if other.hasId {
           id = other.id
      }
      if (other.hasMes) {
          try mergeMes(value: other.mes)
      }
      try merge(unknownField: other.unknownFields)
      return self
    }
    @discardableResult
    override public func mergeFrom(codedInputStream: CodedInputStream) throws -> SampleMessage.Builder {
         return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
    }
    @discardableResult
    override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> SampleMessage.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
      while (true) {
        let protobufTag = try codedInputStream.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 34:
          name = try codedInputStream.readString()

        case 40:
          id = try codedInputStream.readInt32()

        case 50:
          let subBuilder:SubMessage.Builder = SubMessage.Builder()
          if hasMes {
            try subBuilder.mergeFrom(other: mes)
          }
          try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
          mes = subBuilder.buildPartial()

        default:
          if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
    class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> SampleMessage.Builder {
      let resultDecodedBuilder = SampleMessage.Builder()
      if let jsonValueName = jsonMap["name"] as? String {
        resultDecodedBuilder.name = jsonValueName
      }
      if let jsonValueId = jsonMap["id"] as? Int {
        resultDecodedBuilder.id = Int32(jsonValueId)
      } else if let jsonValueId = jsonMap["id"] as? String {
        resultDecodedBuilder.id = Int32(jsonValueId)!
      }
      if let jsonValueMes = jsonMap["mes"] as? Dictionary<String,Any> {
        resultDecodedBuilder.mes = try SubMessage.Builder.decodeToBuilder(jsonMap:jsonValueMes).build()

      }
      return resultDecodedBuilder
    }
    override class public func fromJSONToBuilder(data:Data) throws -> SampleMessage.Builder {
      let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
      guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
      }
      return try SampleMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
    }
  }

}

extension SubMessage: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<SubMessage> {
    var mergedArray = Array<SubMessage>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> SubMessage? {
    return try SubMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> SubMessage {
    return try SubMessage.Builder().mergeFrom(data: data, extensionRegistry:MessageRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> SubMessage {
    return try SubMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> SubMessage {
    return try SubMessage.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> SubMessage {
    return try SubMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> SubMessage {
    return try SubMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> SubMessage {
    return try SubMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension SampleMessage: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<SampleMessage> {
    var mergedArray = Array<SampleMessage>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> SampleMessage? {
    return try SampleMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> SampleMessage {
    return try SampleMessage.Builder().mergeFrom(data: data, extensionRegistry:MessageRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> SampleMessage {
    return try SampleMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> SampleMessage {
    return try SampleMessage.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> SampleMessage {
    return try SampleMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> SampleMessage {
    return try SampleMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> SampleMessage {
    return try SampleMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}

// @@protoc_insertion_point(global_scope)

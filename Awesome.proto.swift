// Generated by the Protocol Buffers 3.2 compiler.  DO NOT EDIT!
// Source file "awesome.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct AwesomeRoot {
  public static let `default` = AwesomeRoot()
  public var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(registry: extensionRegistry)
  }
  public func registerAllExtensions(registry: ExtensionRegistry) {
  }
}

final public class AwesomeMessage : GeneratedMessage {

  public static func == (lhs: AwesomeMessage, rhs: AwesomeMessage) -> Bool {
    if (lhs === rhs) {
      return true
    }
    var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
    fieldCheck = fieldCheck && (lhs.hasAwesomeField == rhs.hasAwesomeField) && (!lhs.hasAwesomeField || lhs.awesomeField == rhs.awesomeField)
    fieldCheck = fieldCheck && (lhs.hasUserName == rhs.hasUserName) && (!lhs.hasUserName || lhs.userName == rhs.userName)
    fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
    return fieldCheck
  }

  /// becomes awesomeField
  public fileprivate(set) var awesomeField:String = ""
  public fileprivate(set) var hasAwesomeField:Bool = false

  public fileprivate(set) var userName:String = ""
  public fileprivate(set) var hasUserName:Bool = false

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeTo(codedOutputStream: CodedOutputStream) throws {
    if hasAwesomeField {
      try codedOutputStream.writeString(fieldNumber: 1, value:awesomeField)
    }
    if hasUserName {
      try codedOutputStream.writeString(fieldNumber: 2, value:userName)
    }
    try unknownFields.writeTo(codedOutputStream: codedOutputStream)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasAwesomeField {
      serialize_size += awesomeField.computeStringSize(fieldNumber: 1)
    }
    if hasUserName {
      serialize_size += userName.computeStringSize(fieldNumber: 2)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func getBuilder() -> AwesomeMessage.Builder {
    return AwesomeMessage.classBuilder() as! AwesomeMessage.Builder
  }
  public func getBuilder() -> AwesomeMessage.Builder {
    return classBuilder() as! AwesomeMessage.Builder
  }
  override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
    return AwesomeMessage.Builder()
  }
  override public func classBuilder() -> ProtocolBuffersMessageBuilder {
    return AwesomeMessage.Builder()
  }
  public func toBuilder() throws -> AwesomeMessage.Builder {
    return try AwesomeMessage.builderWithPrototype(prototype:self)
  }
  public class func builderWithPrototype(prototype:AwesomeMessage) throws -> AwesomeMessage.Builder {
    return try AwesomeMessage.Builder().mergeFrom(other:prototype)
  }
  override public func encode() throws -> Dictionary<String,Any> {
    guard isInitialized() else {
      throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
    }

    var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
    if hasAwesomeField {
      jsonMap["awesomeField"] = awesomeField
    }
    if hasUserName {
      jsonMap["userName"] = userName
    }
    return jsonMap
  }
  override class public func decode(jsonMap:Dictionary<String,Any>) throws -> AwesomeMessage {
    return try AwesomeMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
  }
  override class public func fromJSON(data:Data) throws -> AwesomeMessage {
    return try AwesomeMessage.Builder.fromJSONToBuilder(data:data).build()
  }
  override public func getDescription(indent:String) throws -> String {
    var output = ""
    if hasAwesomeField {
      output += "\(indent) awesomeField: \(awesomeField) \n"
    }
    if hasUserName {
      output += "\(indent) userName: \(userName) \n"
    }
    output += unknownFields.getDescription(indent: indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasAwesomeField {
             hashCode = (hashCode &* 31) &+ awesomeField.hashValue
          }
          if hasUserName {
             hashCode = (hashCode &* 31) &+ userName.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "AwesomeMessage"
  }
  override public func className() -> String {
      return "AwesomeMessage"
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    fileprivate var builderResult:AwesomeMessage = AwesomeMessage()
    public func getMessage() -> AwesomeMessage {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    /// becomes awesomeField
    public var awesomeField:String {
         get {
              return builderResult.awesomeField
         }
         set (value) {
             builderResult.hasAwesomeField = true
             builderResult.awesomeField = value
         }
    }
    public var hasAwesomeField:Bool {
         get {
              return builderResult.hasAwesomeField
         }
    }
    @discardableResult
    public func setAwesomeField(_ value:String) -> AwesomeMessage.Builder {
      self.awesomeField = value
      return self
    }
    @discardableResult
    public func clearAwesomeField() -> AwesomeMessage.Builder{
         builderResult.hasAwesomeField = false
         builderResult.awesomeField = ""
         return self
    }
    public var userName:String {
         get {
              return builderResult.userName
         }
         set (value) {
             builderResult.hasUserName = true
             builderResult.userName = value
         }
    }
    public var hasUserName:Bool {
         get {
              return builderResult.hasUserName
         }
    }
    @discardableResult
    public func setUserName(_ value:String) -> AwesomeMessage.Builder {
      self.userName = value
      return self
    }
    @discardableResult
    public func clearUserName() -> AwesomeMessage.Builder{
         builderResult.hasUserName = false
         builderResult.userName = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    @discardableResult
    override public func clear() -> AwesomeMessage.Builder {
      builderResult = AwesomeMessage()
      return self
    }
    override public func clone() throws -> AwesomeMessage.Builder {
      return try AwesomeMessage.builderWithPrototype(prototype:builderResult)
    }
    override public func build() throws -> AwesomeMessage {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> AwesomeMessage {
      let returnMe:AwesomeMessage = builderResult
      return returnMe
    }
    @discardableResult
    public func mergeFrom(other:AwesomeMessage) throws -> AwesomeMessage.Builder {
      if other == AwesomeMessage() {
       return self
      }
      if other.hasAwesomeField {
           awesomeField = other.awesomeField
      }
      if other.hasUserName {
           userName = other.userName
      }
      try merge(unknownField: other.unknownFields)
      return self
    }
    @discardableResult
    override public func mergeFrom(codedInputStream: CodedInputStream) throws -> AwesomeMessage.Builder {
         return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
    }
    @discardableResult
    override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> AwesomeMessage.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
      while (true) {
        let protobufTag = try codedInputStream.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10:
          awesomeField = try codedInputStream.readString()

        case 18:
          userName = try codedInputStream.readString()

        default:
          if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
    class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> AwesomeMessage.Builder {
      let resultDecodedBuilder = AwesomeMessage.Builder()
      if let jsonValueAwesomeField = jsonMap["awesomeField"] as? String {
        resultDecodedBuilder.awesomeField = jsonValueAwesomeField
      }
      if let jsonValueUserName = jsonMap["userName"] as? String {
        resultDecodedBuilder.userName = jsonValueUserName
      }
      return resultDecodedBuilder
    }
    override class public func fromJSONToBuilder(data:Data) throws -> AwesomeMessage.Builder {
      let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
      guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
      }
      return try AwesomeMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
    }
  }

}

extension AwesomeMessage: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<AwesomeMessage> {
    var mergedArray = Array<AwesomeMessage>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> AwesomeMessage? {
    return try AwesomeMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> AwesomeMessage {
    return try AwesomeMessage.Builder().mergeFrom(data: data, extensionRegistry:AwesomeRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> AwesomeMessage {
    return try AwesomeMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> AwesomeMessage {
    return try AwesomeMessage.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> AwesomeMessage {
    return try AwesomeMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> AwesomeMessage {
    return try AwesomeMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> AwesomeMessage {
    return try AwesomeMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}

// @@protoc_insertion_point(global_scope)
